#ifndef TEXT_CONSTANTS_H
#define TEXT_CONSTANTS_H

#include "types.h"
#include "macros.h"

MAKE_ENUM(u8, StoryTextId) {
    STORY_TEXT_PLANET_ZEBES,
    STORY_TEXT_THE_TIMING,
    STORY_TEXT_COULD_I_SURVIVE,
    STORY_TEXT_EMERGENCY,
    STORY_TEXT_EXTERMINATE,
    STORY_TEXT_DEFEAT,

    STORY_TEXT_COUNT
};

MAKE_ENUM(u8, MessageId) {
    MESSAGE_DUMMY,
    MESSAGE_ENERGY_TANK_ACQUIRED,
    MESSAGE_MISSILE_TANK_ACQUIRED,
    MESSAGE_FIRST_MISSILE_TANK,
    MESSAGE_SUPER_MISSILE_TANK_ACQUIRED,
    MESSAGE_FIRST_SUPER_MISSILE_TANK,
    MESSAGE_POWER_BOMB_TANK_ACQUIRED,
    MESSAGE_FIRST_POWER_BOMB_TANK,
    MESSAGE_LONG_BEAM,
    MESSAGE_CHARGE_BEAM,
    MESSAGE_ICE_BEAM,
    MESSAGE_WAVE_BEAM,
    MESSAGE_UKNOWN_ITEM_PLASMA,
    MESSAGE_BOMB,
    MESSAGE_VARIA_SUIT,
    MESSAGE_UNKNOWN_ITEM_GRAVITY,
    MESSAGE_MORPH_BALL,
    MESSAGE_SPEED_BOOSTER,
    MESSAGE_HIGH_JUMP,
    MESSAGE_SCREW_ATTACK,
    MESSAGE_UNKNOWN_ITEM_SPACE_JUMP,
    MESSAGE_POWER_GRIP,
    MESSAGE_SAVE_PROMPT,
    MESSAGE_SAVE_COMPLETE,
    MESSAGE_WEAPON_RESUPPLY_COMPLETE,
    MESSAGE_ENERGY_TANK_RECHARGE_COMPLETE,
    MESSAGE_WEAPONS_AND_ENERGY_RESTORED,
    MESSAGE_BRINSTAR_MAP_ACQUIRED,
    MESSAGE_KRAID_MAP_ACQUIRED,
    MESSAGE_NORFAIR_MAP_ACQUIRED,
    MESSAGE_RIDLEY_MAP_ACQUIRED,
    MESSAGE_MOTHER_SHIP_MAP_ACQUIRED,
    MESSAGE_FULLY_POWERED_SUIT,
    MESSAGE_ZEBES_ESCAPE,
    MESSAGE_CHOZODIA_ESCAPE,
    MESSAGE_ENEMY_LOCATION_ABNORMAL,
    MESSAGE_ACTIVATE_EASY_SLEEP,
    MESSAGE_PRESS_SELECT_L_AND_R,
    MESSAGE_EASY_SLEEP_PROMPT,

    MESSAGE_COUNT,

    MESSAGE_NONE = -1,
};

MAKE_ENUM(u8, FileScreenTextId) {
    FILE_SCREEN_TEXT_START_GAME,
    FILE_SCREEN_TEXT_COPY_SOURCE_CHOOSE,
    FILE_SCREEN_TEXT_COPY_DESTINATION_CHOOSE,
    FILE_SCREEN_TEXT_COPY_CONFIRM,
    FILE_SCREEN_TEXT_ERASE_CHOOSE,
    FILE_SCREEN_TEXT_ERASE_CONFIRM,
    FILE_SCREEN_TEXT_FILE_A_CORRUPT_REVERT,
    FILE_SCREEN_TEXT_FILE_B_CORRUPT_REVERT,
    FILE_SCREEN_TEXT_FILE_C_CORRUPT_REVERT,
    FILE_SCREEN_TEXT_FILE_A_CORRUPT_ERASE,
    FILE_SCREEN_TEXT_FILE_B_CORRUPT_ERASE,
    FILE_SCREEN_TEXT_FILE_C_CORRUPT_ERASE,
    FILE_SCREEN_TEXT_ERASE_ALL_REFORMAT,
    FILE_SCREEN_TEXT_ERASE_ALL,
    FILE_SCREEN_TEXT_CONTINUE_NEW,
    FILE_SCREEN_TEXT_CONTINUE_NEW_TIME_ATTACK,
    FILE_SCREEN_TEXT_MESSAGE_OPTION,
    FILE_SCREEN_TEXT_DIFFICULTY,
    FILE_SCREEN_TEXT_DIFFICULTY_HARD,
    FILE_SCREEN_TEXT_ERASE_FILE_CONFIRM,
    FILE_SCREEN_TEXT_LINKING_PLEASE_WAIT,
    FILE_SCREEN_TEXT_UNABLE_TO_DETECT_FUSION,
    FILE_SCREEN_TEXT_LINKING_ERROR,
    FILE_SCREEN_TEXT_TURN_OFF_CONFIRM_LINK,
    FILE_SCREEN_TEXT_DO_NOT_TURN_POWER_OFF,
    FILE_SCREEN_TEXT_DATA_UPLOAD_COMPLETE,
    FILE_SCREEN_TEXT_LINK_COMPLETE,
    FILE_SCREEN_TEXT_BEST_TIME,
    FILE_SCREEN_TEXT_BEST_TIME_100,
    FILE_SCREEN_TEXT_ID_PASSWORD,
    FILE_SCREEN_TEXT_CANT_COPY_TIME_ATTACK,
    FILE_SCREEN_TEXT_LINKING_ERROR_TRY_AGAIN,
    FILE_SCREEN_TEXT_LINKING_ERROR_CHECK_CONNECTION,
    FILE_SCREEN_TEXT_GALLERY_UNLOCK,
    FILE_SCREEN_TEXT_TIME_ATTACK_RECORD_UNLOCK,
    FILE_SCREEN_TEXT_SOUND_TEST_UNLOCK,
    FILE_SCREEN_TEXT_NES_METROID_UNLOCK,
#ifdef RANDOMIZER
    FILE_SCREEN_TEXT_DIFFICULTY_HARD_ONLY,
#endif // RANDOMIZER

    FILE_SCREEN_TEXT_END
};

MAKE_ENUM(u8, FileScreenMessageInfoId) {
    FILE_SCREEN_MESSAGE_INFO_ID_START_GAME,
    FILE_SCREEN_MESSAGE_INFO_ID_COPY_SOURCE_CHOOSE,
    FILE_SCREEN_MESSAGE_INFO_ID_COPY_DESTINATION_CHOOSE,
    FILE_SCREEN_MESSAGE_INFO_ID_COPY_CONFIRM,
    FILE_SCREEN_MESSAGE_INFO_ID_CANT_COPY_TIME_ATTACK,
    FILE_SCREEN_MESSAGE_INFO_ID_ERASE_CHOOSE,
    FILE_SCREEN_MESSAGE_INFO_ID_ERASE_CONFIRM,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_A_CORRUPT_REVERT,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_B_CORRUPT_REVERT,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_C_CORRUPT_REVERT,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_A_CORRUPT_ERASE,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_B_CORRUPT_ERASE,
    FILE_SCREEN_MESSAGE_INFO_ID_FILE_C_CORRUPT_ERASE,
    FILE_SCREEN_MESSAGE_INFO_ID_ERASE_ALL_REFORMAT,
    FILE_SCREEN_MESSAGE_INFO_ID_ERASE_ALL,
    FILE_SCREEN_MESSAGE_INFO_ID_CONTINUE_NEW,
    FILE_SCREEN_MESSAGE_INFO_ID_CONTINUE_NEW_TIME_ATTACK,
    FILE_SCREEN_MESSAGE_INFO_ID_MESSAGE_OPTION,
    FILE_SCREEN_MESSAGE_INFO_ID_DIFFICULTY,
    FILE_SCREEN_MESSAGE_INFO_ID_DIFFICULTY_HARD,
    FILE_SCREEN_MESSAGE_INFO_ID_ERASE_FILE_CONFIRM,
    FILE_SCREEN_MESSAGE_INFO_ID_LINKING_PLEASE_WAIT,
    FILE_SCREEN_MESSAGE_INFO_ID_UNABLE_TO_DETECT_FUSION,
    FILE_SCREEN_MESSAGE_INFO_ID_LINKING_ERROR,
    FILE_SCREEN_MESSAGE_INFO_ID_TURN_OFF_CONFIRM_LINK,
    FILE_SCREEN_MESSAGE_INFO_ID_DO_NOT_TURN_POWER_OFF,
    FILE_SCREEN_MESSAGE_INFO_ID_DATA_UPLOAD_COMPLETE,
    FILE_SCREEN_MESSAGE_INFO_ID_LINKING_ERROR_CHECK_CONNECTION,
    FILE_SCREEN_MESSAGE_INFO_ID_LINK_COMPLETE,
    FILE_SCREEN_MESSAGE_INFO_ID_BEST_TIME,
    FILE_SCREEN_MESSAGE_INFO_ID_BEST_TIME_100,
    FILE_SCREEN_MESSAGE_INFO_ID_ID_PASSWORD,
    FILE_SCREEN_MESSAGE_INFO_ID_ID_PASSWORD2,
#ifdef RANDOMIZER
    FILE_SCREEN_MESSAGE_INFO_ID_DIFFICULTY_HARD_ONLY,
#endif // RANDOMIZER

    FILE_SCREEN_MESSAGE_INFO_ID_COUNT
};

MAKE_ENUM(u8, DescriptionTextId) {
    DESCRIPTION_TEXT_LONG_BEAM,
    DESCRIPTION_TEXT_CHARGE_BEAM,
    DESCRIPTION_TEXT_ICE_BEAM,
    DESCRIPTION_TEXT_WAVE_BEAM,
    DESCRIPTION_TEXT_PLASMA_BEAM,
    DESCRIPTION_TEXT_MISSILES,
    DESCRIPTION_TEXT_SUPER_MISSILES,
    DESCRIPTION_TEXT_BOMBS,
    DESCRIPTION_TEXT_POWER_BOMBS,
    DESCRIPTION_TEXT_VARIA_SUIT,
    DESCRIPTION_TEXT_GRAVITY_SUIT,
    DESCRIPTION_TEXT_MORPH_BALL,
    DESCRIPTION_TEXT_POWER_GRIP,
    DESCRIPTION_TEXT_SPEEDBOOSTER,
    DESCRIPTION_TEXT_HIGH_JUMP,
    DESCRIPTION_TEXT_SCREW_ATTACK,
    DESCRIPTION_TEXT_SPACE_JUMP,
    DESCRIPTION_TEXT_UNKNOWN_ITEM,
    DESCRIPTION_TEXT_PISTOL,

    DESCRIPTION_TEXT_COUNT
};

/**
 * @brief Checks whether a provided message is an "item" message
 * 
 * @param msg Message id
 * @return Is item message
 */
#define MESSAGE_IS_ITEM(msg)                                                                                \
    (msg) == MESSAGE_LONG_BEAM || (msg) == MESSAGE_CHARGE_BEAM || (msg) == MESSAGE_ICE_BEAM ||              \
    (msg) == MESSAGE_WAVE_BEAM || (msg) == MESSAGE_UKNOWN_ITEM_PLASMA || (msg) == MESSAGE_BOMB ||           \
    (msg) == MESSAGE_VARIA_SUIT || (msg) == MESSAGE_UNKNOWN_ITEM_GRAVITY || (msg) == MESSAGE_MORPH_BALL ||  \
    (msg) == MESSAGE_SPEED_BOOSTER || (msg) == MESSAGE_HIGH_JUMP || (msg) == MESSAGE_SCREW_ATTACK ||        \
    (msg) == MESSAGE_UNKNOWN_ITEM_SPACE_JUMP || (msg) == MESSAGE_POWER_GRIP

/**
 * @brief Checks whether a provided message is an "unknown item" message
 * 
 * @param msg Message id
 * @return Is unknown item message
 */
#define MESSAGE_IS_UNKNOWN_ITEM(msg)                                                                                        \
    (msg) == MESSAGE_UKNOWN_ITEM_PLASMA || (msg) == MESSAGE_UNKNOWN_ITEM_GRAVITY || (msg) == MESSAGE_UNKNOWN_ITEM_SPACE_JUMP

/**
 * @brief Checks whether a provided message is a "first tank" message
 * 
 * @param msg Message id
 * @return Is first tank message
 */
#define MESSAGE_IS_FIRST_TANK(msg)                                                                                              \
    (msg) == MESSAGE_FIRST_MISSILE_TANK || (msg) == MESSAGE_FIRST_SUPER_MISSILE_TANK || (msg) == MESSAGE_FIRST_POWER_BOMB_TANK

/**
 * @brief Checks whether a provided message is a "tank" message
 * 
 * @param msg Message id
 * @return Is tank message
 */
#define MESSAGE_IS_TANK(msg)                                                                    \
    (msg) == MESSAGE_ENERGY_TANK_ACQUIRED || (msg) == MESSAGE_MISSILE_TANK_ACQUIRED ||          \
    (msg) == MESSAGE_SUPER_MISSILE_TANK_ACQUIRED || (msg) == MESSAGE_POWER_BOMB_TANK_ACQUIRED

/**
 * @brief Checks whether a provided message is a "map" message
 * 
 * @param msg Message id
 * @return Is map message
 */
#define MESSAGE_IS_MAP(msg)                                                         \
    (msg) == MESSAGE_BRINSTAR_MAP_ACQUIRED || (msg) == MESSAGE_KRAID_MAP_ACQUIRED ||\
    (msg) == MESSAGE_NORFAIR_MAP_ACQUIRED || (msg) == MESSAGE_RIDLEY_MAP_ACQUIRED ||\
    (msg) == MESSAGE_MOTHER_SHIP_MAP_ACQUIRED

/**
 * @brief Checks whether a provided message is an "escape" message
 * 
 * @param msg Message id
 * @return Is escape message
 */
#define MESSAGE_IS_ESCAPE(msg)                                          \
    (msg) == MESSAGE_ZEBES_ESCAPE || (msg) == MESSAGE_CHOZODIA_ESCAPE

/**
 * @brief Mask to get the parameter type of special text parameters
 * 
 */
#define CHAR_MASK           C_16_2_8(0xFF, 0)

/**
 * @brief Text parameter to add an arbitrary horizontal spacing
 * 
 */
#define CHAR_WIDTH_MASK     C_16_2_8(0x80, 0)

/**
 * @brief Text parameter to change the rending color
 * 
 */
#define CHAR_COLOR_MASK     C_16_2_8(0x81, 0)

/**
 * @brief Text parameter to change the current horizontal cursor position
 * 
 */
#define CHAR_INDENT_MASK    C_16_2_8(0x83, 0)

/**
 * @brief Text parameter to add a delay
 * 
 */
#define CHAR_DELAY_MASK     C_16_2_8(0xE1, 0)

/**
 * @brief Indicates that the text should change page
 * 
 */
#define CHAR_NEW_PAGE       C_16_2_8(0xFD, 0)

/**
 * @brief Indicates that the text should change line
 * 
 */
#define CHAR_NEW_LINE       C_16_2_8(0xFE, 0)

/**
 * @brief Text terminator
 * 
 */
#define CHAR_TERMINATOR     C_16_2_8(0xFF, 0)

MAKE_ENUM(s32, TextState) {
    TEXT_STATE_NONE     = -1,
    TEXT_STATE_NOTHING  =  0,
    TEXT_STATE_NEW_LINE =  1,
    TEXT_STATE_ENDED    =  2,
    TEXT_STATE_UNK_3    =  3,
    TEXT_STATE_NEW_PAGE =  4,
};

#endif /* TEXT_CONSTANTS_H */
